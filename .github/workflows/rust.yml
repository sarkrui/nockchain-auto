name: Build Release Binaries

on:
  workflow_dispatch:
    inputs:
      build_linux_x86_64:
        description: 'Build for Linux x86_64'
        type: boolean
        default: true
      build_macos_arm64:
        description: 'Build for macOS ARM64'
        type: boolean
        default: true
      build_macos_x86_64:
        description: 'Build for macOS x86_64'
        type: boolean
        default: false

  push:
    branches:
      - main
    tags:
      - 'v*'

  pull_request:
    branches:
      - main

jobs:
  setup_matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix_string: ${{ steps.set_matrix.outputs.matrix_string }}
    steps:
      - name: Determine build matrix
        id: set_matrix
        run: |
          matrix_include_json_objects=()

          if [[ "${{ github.event_name != 'workflow_dispatch' || github.event.inputs.build_linux_x86_64 == 'true' }}" == "true" ]]; then
            matrix_include_json_objects+=('{"os": "ubuntu-latest", "suffix": "linux-x86_64"}')
          fi
          if [[ "${{ github.event_name != 'workflow_dispatch' || github.event.inputs.build_macos_arm64 == 'true' }}" == "true" ]]; then
            matrix_include_json_objects+=('{"os": "macos-latest", "suffix": "macos-arm64"}')
          fi
          if [[ "${{ github.event_name != 'workflow_dispatch' || github.event.inputs.build_macos_x86_64 == 'true' }}" == "true" ]]; then
            matrix_include_json_objects+=('{"os": "macos-13", "suffix": "macos-x86_64"}')
          fi

          json_array_content=$(IFS=,; echo "${matrix_include_json_objects[*]}")
          echo "matrix_string={"include": [$json_array_content]}" >> $GITHUB_OUTPUT

  build:
    needs: setup_matrix
    if: needs.setup_matrix.outputs.matrix_string != '{"include": []}'
    strategy:
      fail-fast: false # Optional: prevent job cancellation if one matrix job fails
      matrix: ${{ fromJson(needs.setup_matrix.outputs.matrix_string) }}
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential curl git

      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install curl git

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
          components: rustfmt, clippy

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Setup environment file
        run: |
          cp .env_example .env
          sed -i.bak "s/MINING_PUBKEY=.*/MINING_PUBKEY=${{ secrets.MINING_PUBKEY }}/" .env
          rm -f .env.bak

      - name: Install Hoon compiler
        run: make install-hoonc

      - name: Build Nockchain and wallet
        run: make build

      - name: Package binaries
        run: |
          mkdir -p artifacts
          # First copy the binaries with platform suffix for individual artifacts
          cp target/release/nockchain artifacts/nockchain-${{ matrix.suffix }}
          cp target/release/nockchain-wallet artifacts/nockchain-wallet-${{ matrix.suffix }}
          cp target/release/equix-latency artifacts/equix-latency-${{ matrix.suffix }}
          cp target/release/hoonc artifacts/hoonc-${{ matrix.suffix }}
          cp target/release/nockchain-bitcoin-sync artifacts/nockchain-bitcoin-sync-${{ matrix.suffix }}
          
          # Create a temp directory for zip contents with clean binary names
          mkdir -p artifacts/zip-contents
          cp target/release/nockchain artifacts/zip-contents/nockchain
          cp target/release/nockchain-wallet artifacts/zip-contents/nockchain-wallet
          cp target/release/equix-latency artifacts/zip-contents/equix-latency
          cp target/release/hoonc artifacts/zip-contents/hoonc
          cp target/release/nockchain-bitcoin-sync artifacts/zip-contents/nockchain-bitcoin-sync
          
          # Create zip file for all binaries by architecture
          cd artifacts/zip-contents
          zip ../nockchain-all-${{ matrix.suffix }}.zip *
          cd ../..

      - name: Upload individual build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nockchain-binaries-${{ matrix.suffix }}
          path: artifacts/

  release:
    needs: build
    if: startsWith(github.ref, 'refs/tags/v') && needs.build.result == 'success' # Ensure build was successful if it ran
    runs-on: ubuntu-latest
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-artifacts # Download all artifacts into this directory

      - name: Prepare release files
        run: |
          mkdir -p release-files
          
          # Check if each platform artifact exists and copy it to release-files
          # These paths depend on the output structure of download-artifact@v4
          # which nests artifacts by their upload name.
          linux_path="all-artifacts/nockchain-binaries-linux-x86_64/nockchain-all-linux-x86_64.zip"
          macos_arm_path="all-artifacts/nockchain-binaries-macos-arm64/nockchain-all-macos-arm64.zip"
          macos_x86_path="all-artifacts/nockchain-binaries-macos-x86_64/nockchain-all-macos-x86_64.zip"

          if [ -f "$linux_path" ]; then
            cp "$linux_path" release-files/
          else
            echo "Linux artifact not found at $linux_path"
          fi
          
          if [ -f "$macos_arm_path" ]; then
            cp "$macos_arm_path" release-files/
          else
            echo "macOS ARM64 artifact not found at $macos_arm_path"
          fi
          
          if [ -f "$macos_x86_path" ]; then
            cp "$macos_x86_path" release-files/
          else
            echo "macOS x86_64 artifact not found at $macos_x86_path"
          fi
          
          # Check if any files were copied
          if [ -z "$(ls -A release-files)" ]; then
            echo "No artifacts found to release. Exiting."
            exit 1
          fi

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: release-files/*.zip
          generate_release_notes: true
