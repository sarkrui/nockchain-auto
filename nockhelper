#!/bin/bash

set -e

# MINING_PUBKEY to be used in the nockchain command
MINING_PUBKEY="2cLQ54ec6Caq9C4mTZoSk2Kv4XjJ3vzhyDehgdvEQue6dXZPp9jAa2ZqsaJciB3ZZXomoCjGp53GiyVJNSx2KDn8ehmNGdWcqBsfosDCsAQLDSBW8KgaDDHL4ojiFMSMtHbc"

# Nockhelper version
NOCKHELPER_VERSION="1.0.2"

# Installation directory
INSTALL_DIR="$HOME/nockbin"
HELPER_SCRIPT="$INSTALL_DIR/nockhelper"
HELPER_REMOTE="https://raw.githubusercontent.com/sarkrui/nockchain-auto/refs/heads/master/nockhelper"

# Environment variables for nockchain
NOCKCHAIN_ENV_VARS="export RUST_LOG=\"info,nockchain=debug,nockchain_libp2p_io=info,libp2p=info,libp2p_quic=info\" && export MINIMAL_LOG_FORMAT=\"true\""

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to prompt for user confirmation
confirm() {
    read -p "$1 [Y/n] " response
    case "$response" in
        [nN][oO]|[nN]) 
            return 1
            ;;
        *)
            return 0
            ;;
    esac
}

# Function to check and install dependencies
check_dependencies() {
    echo "╔═════════════════════════════════════════════════════════════════╗"
    echo "║                    CHECKING DEPENDENCIES                         ║"
    echo "╚═════════════════════════════════════════════════════════════════╝"
    
    local os=$(detect_os)
    local missing_deps=()
    local deps=("curl" "git" "wget" "btop")
    
    # Check for missing dependencies
    for dep in "${deps[@]}"; do
        if ! command_exists "$dep"; then
            missing_deps+=("$dep")
        else
            echo "✅ $dep is already installed."
        fi
    done
    
    # Check for screen on Linux and macOS
    if ! command_exists screen; then
        echo "screen is required but not installed."
        if confirm "Would you like to install screen?"; then
            if [[ "$os" == "macos" ]]; then
                echo "Installing screen using Homebrew..."
                brew install screen
            elif [[ "$os" == "linux" ]]; then
                echo "Installing screen using system package manager..."
                if command_exists apt-get; then
                    sudo apt-get update
                    sudo apt-get install -y screen
                elif command_exists yum; then
                    sudo yum install -y screen
                else
                    echo "Cannot automatically install screen. Please install it manually and try again."
                    return 1
                fi
            fi
            echo "✅ screen installed successfully."
        else
            echo "Screen installation skipped. Cannot run nockchain in background without screen."
            return 1
        fi
    else
        echo "✅ screen is already installed."
    fi
    
    # If all dependencies are installed
    if [ ${#missing_deps[@]} -eq 0 ]; then
        echo "All dependencies are installed."
        return 0
    fi
    
    # Ask user to install missing dependencies
    echo "The following dependencies are missing: ${missing_deps[*]}"
    if ! confirm "Would you like to install them?"; then
        echo "Dependencies installation skipped. Some features may not work properly."
        return 1
    fi
    
    # Install missing dependencies based on OS
    if [[ "$os" == "macos" ]]; then
        if ! command_exists brew; then
            echo "Homebrew is required but was not found."
            if confirm "Would you like to install Homebrew?"; then
                /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
            else
                echo "Homebrew installation skipped. Cannot install dependencies without Homebrew."
                return 1
            fi
        fi
        
        for dep in "${missing_deps[@]}"; do
            echo "Installing $dep using Homebrew..."
            brew install "$dep"
        done
    elif [[ "$os" == "linux" ]]; then
        if command_exists apt-get; then
            echo "Installing dependencies using apt-get..."
            sudo apt-get update
            sudo apt-get install -y "${missing_deps[@]}"
        elif command_exists yum; then
            echo "Installing dependencies using yum..."
            sudo yum install -y "${missing_deps[@]}"
        else
            echo "Cannot automatically install dependencies. Please install them manually and try again."
            return 1
        fi
    fi
    
    # Verify installation
    local still_missing=()
    for dep in "${missing_deps[@]}"; do
        if ! command_exists "$dep"; then
            still_missing+=("$dep")
        else
            echo "✅ $dep installed successfully."
        fi
    done
    
    if [ ${#still_missing[@]} -eq 0 ]; then
        echo "All dependencies installed successfully."
        return 0
    else
        echo "The following dependencies could not be installed: ${still_missing[*]}"
        echo "Please install them manually and try again."
        return 1
    fi
}

# Function to get the latest release tag from GitHub
get_latest_release_tag() {
    local repo="sarkrui/nockchain-auto"
    local tag=""
    
    if command_exists curl; then
        tag=$(curl -s "https://api.github.com/repos/$repo/releases/latest" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
    elif command_exists wget; then
        tag=$(wget -qO- "https://api.github.com/repos/$repo/releases/latest" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
    fi
    
    if [ -z "$tag" ]; then
        echo "unknown"
    else
        echo "$tag"
    fi
}

# Function to download/update release binaries
download_binaries() {
    echo "╔═════════════════════════════════════════════════════════════════╗"
    echo "║                DOWNLOADING NOCKCHAIN BINARIES                   ║"
    echo "╚═════════════════════════════════════════════════════════════════╝"
    
    # Check dependencies first
    check_dependencies
    
    local os=$(detect_os)
    local arch=$(detect_arch)
    local release_tag=$(get_latest_release_tag)
    
    echo "Detected: $os on $arch"
    echo "Latest release: $release_tag"
    
    # Create installation directory if it doesn't exist
    if [ ! -d "$INSTALL_DIR" ]; then
        echo "Creating installation directory: $INSTALL_DIR"
        mkdir -p "$INSTALL_DIR"
    fi
    
    # Set download URL based on OS and architecture
    local download_url="https://github.com/sarkrui/nockchain-auto/releases/latest/download/nockchain-all-$os-$arch.zip"
    local temp_zip="$INSTALL_DIR/nockchain-all-$os-$arch.zip"
    
    echo "Downloading nockchain binaries from: $download_url ($release_tag)"
    
    # Download the zip file
    if command_exists curl; then
        curl -L "$download_url" -o "$temp_zip"
    else
        wget "$download_url" -O "$temp_zip"
    fi
    
    if [ ! -f "$temp_zip" ]; then
        echo "Failed to download nockchain binaries"
        exit 1
    fi
    
    # Extract the zip file
    echo "Extracting binaries to $INSTALL_DIR"
    unzip -o "$temp_zip" -d "$INSTALL_DIR"
    
    # Make binaries executable
    echo "Making binaries executable"
    chmod +x "$INSTALL_DIR/nockchain-wallet" "$INSTALL_DIR/equix-latency" "$INSTALL_DIR/hoonc" "$INSTALL_DIR/nockchain" "$INSTALL_DIR/nockchain-bitcoin-sync"
    
    # Clean up
    echo "Cleaning up"
    rm "$temp_zip"
    
    echo "✅ Download complete!"
    echo "📂 Nockchain binaries have been downloaded to: $INSTALL_DIR"
}

# Detect operating system
detect_os() {
    if [[ "$OSTYPE" == "darwin"* ]]; then
        echo "macos"
    elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
        echo "linux"
    else
        echo "Unsupported operating system: $OSTYPE"
        exit 1
    fi
}

# Detect architecture
detect_arch() {
    local arch=$(uname -m)
    if [[ "$arch" == "x86_64" ]]; then
        echo "x86_64"
    elif [[ "$arch" == "arm64" ]] || [[ "$arch" == "aarch64" ]]; then
        echo "arm64"
    else
        echo "Unsupported architecture: $arch"
        exit 1
    fi
}

# Detect preferred shell for screen
detect_shell() {
    local os=$(detect_os)
    if [[ "$os" == "macos" ]] && command_exists zsh; then
        echo "zsh"
    else
        echo "bash"
    fi
}

# Get miner status
get_miner_status() {
    if ! command_exists screen; then
        echo "📛 Screen not installed"
        return
    fi
    
    # Check for single miner instance
    if screen -list | grep -q "nock$"; then
        echo "✅ Default miner is RUNNING in screen session 'nock'"
    else
        echo "❌ Default miner is NOT running"
    fi
    
    # Check for batch instances
    local batch_count=0
    local batch_list=""
    
    while read -r line; do
        if [[ $line =~ nock-([0-9]+) ]]; then
            batch_count=$((batch_count+1))
            batch_list="${batch_list}nock-${BASH_REMATCH[1]}, "
        fi
    done < <(screen -list | grep -o "nock-[0-9]\+")
    
    if [ $batch_count -gt 0 ]; then
        # Remove trailing comma and space
        batch_list=${batch_list%, }
        echo "✅ $batch_count batch miner instances RUNNING: $batch_list"
    fi
}

# Install the script globally
install_helper_globally() {
    local os=$(detect_os)
    local install_path="$HELPER_SCRIPT"
    
    # First try to download the latest helper script from remote
    if command_exists curl; then
        echo "Downloading latest helper script from remote..."
        if curl -s --head --fail "$HELPER_REMOTE" >/dev/null; then
            curl -L "$HELPER_REMOTE" -o "$install_path"
            if [ -f "$install_path" ]; then
                chmod +x "$install_path"
                echo "✅ Helper script downloaded and installed from remote."
            else
                echo "❌ Failed to download helper script from remote. Using local copy."
                cp "$0" "$install_path"
                chmod +x "$install_path"
            fi
        else
            echo "ℹ️ Helper script not found at remote URL. Using local copy."
            cp "$0" "$install_path"
            chmod +x "$install_path"
        fi
    elif command_exists wget; then
        echo "Downloading latest helper script from remote..."
        if wget --spider "$HELPER_REMOTE" 2>/dev/null; then
            wget -q "$HELPER_REMOTE" -O "$install_path"
            if [ -f "$install_path" ]; then
                chmod +x "$install_path"
                echo "✅ Helper script downloaded and installed from remote."
            else
                echo "❌ Failed to download helper script from remote. Using local copy."
                cp "$0" "$install_path"
                chmod +x "$install_path"
            fi
        else
            echo "ℹ️ Helper script not found at remote URL. Using local copy."
            cp "$0" "$install_path"
            chmod +x "$install_path"
        fi
    else
        echo "Neither curl nor wget found. Using local copy."
        cp "$0" "$install_path"
        chmod +x "$install_path"
    fi
    
    # Add to appropriate shell initialization file
    if [[ "$os" == "macos" ]]; then
        local shell_rc="$HOME/.zshrc"
        if [ ! -f "$shell_rc" ]; then
            touch "$shell_rc"
        fi
        
        # Check if already in zshrc
        if ! grep -q "PATH=\"\$PATH:$INSTALL_DIR\"" "$shell_rc"; then
            echo "" >> "$shell_rc"
            echo "# Added by nockhelper installer" >> "$shell_rc"
            echo "export PATH=\"\$PATH:$INSTALL_DIR\"" >> "$shell_rc"
            echo "Added nockhelper to PATH in $shell_rc"
        fi
    else
        # Linux
        local shell_rc="$HOME/.bashrc"
        if [ ! -f "$shell_rc" ]; then
            touch "$shell_rc"
        fi
        
        # Check if already in bashrc
        if ! grep -q "PATH=\"\$PATH:$INSTALL_DIR\"" "$shell_rc"; then
            echo "" >> "$shell_rc"
            echo "# Added by nockhelper installer" >> "$shell_rc"
            echo "export PATH=\"\$PATH:$INSTALL_DIR\"" >> "$shell_rc"
            echo "Added nockhelper to PATH in $shell_rc"
        fi
    fi
    
    echo "nockhelper installed globally. Please restart your terminal or run 'source $shell_rc' to use it."
}

# Function to get the installed nockchain version
get_installed_nockchain_version() {
    if [ ! -x "$INSTALL_DIR/nockchain" ]; then
        echo "not_installed"
        return
    fi
    
    # Try to get version from nockchain binary
    local version=$("$INSTALL_DIR/nockchain" --version 2>/dev/null | grep -oE '[0-9]+\.[0-9]+\.[0-9]+' | head -n 1)
    
    # If that fails, try to get a timestamp from the binary
    if [ -z "$version" ]; then
        local file_date=$(stat -c %y "$INSTALL_DIR/nockchain" 2>/dev/null || stat -f "%Sm" "$INSTALL_DIR/nockchain" 2>/dev/null)
        if [ -n "$file_date" ]; then
            echo "unknown (installed on $file_date)"
            return
        else
            echo "unknown"
            return
        fi
    fi
    
    echo "$version"
}

# Function to get the installed nockhelper version
get_installed_nockhelper_version() {
    # Return the version defined at the top of the script
    echo "$NOCKHELPER_VERSION"
}

# Function to get the latest nockhelper version from GitHub
get_latest_nockhelper_version() {
    local repo="sarkrui/nockchain-auto"
    local tag=""
    
    if command_exists curl; then
        tag=$(curl -s "https://api.github.com/repos/$repo/releases/latest" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
    elif command_exists wget; then
        tag=$(wget -qO- "https://api.github.com/repos/$repo/releases/latest" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
    fi
    
    if [ -z "$tag" ]; then
        echo "unknown"
    else
        echo "$tag"
    fi
}

# Function to compare versions
version_gt() {
    test "$(printf '%s\n' "$1" "$2" | sort -V | head -n 1)" != "$1"
}

# Function to check for nockchain updates
check_for_nockchain_updates() {
    local installed_version=$(get_installed_nockchain_version)
    local latest_version=$(get_latest_release_tag)
    
    if [ "$installed_version" = "not_installed" ]; then
        echo "ℹ️ Nockchain is not installed."
        return 1
    fi
    
    echo "Nockchain:"
    echo "  Installed version: $installed_version"
    echo "  Latest version:    $latest_version"
    
    # If either version is unknown, we can't compare
    if [[ "$installed_version" == *"unknown"* ]] || [[ "$latest_version" == "unknown" ]]; then
        echo "ℹ️ Cannot determine if a nockchain update is needed."
        return 2
    fi
    
    # Remove 'v' prefix if present
    installed_version=${installed_version#v}
    latest_version=${latest_version#v}
    
    if version_gt "$latest_version" "$installed_version"; then
        echo "✅ Nockchain update available! Version $latest_version is newer than your installed version $installed_version."
        return 0
    else
        echo "✅ You have the latest nockchain version ($installed_version)."
        return 3
    fi
}

# Function to check for nockhelper updates
check_for_nockhelper_updates() {
    local installed_version=$(get_installed_nockhelper_version)
    local latest_version=$(get_latest_nockhelper_version)
    
    echo "Nockhelper:"
    echo "  Installed version: $installed_version"
    echo "  Latest version:    $latest_version"
    
    # If either version is unknown, we can't compare
    if [[ "$installed_version" == *"unknown"* ]] || [[ "$latest_version" == "unknown" ]]; then
        echo "ℹ️ Cannot determine if a nockhelper update is needed."
        return 2
    fi
    
    # Remove 'v' prefix if present
    installed_version=${installed_version#v}
    latest_version=${latest_version#v}
    
    if version_gt "$latest_version" "$installed_version"; then
        echo "✅ Nockhelper update available! Version $latest_version is newer than your installed version $installed_version."
        return 0
    else
        echo "✅ You have the latest nockhelper version ($installed_version)."
        return 3
    fi
}

# Function to check for all updates
check_for_updates() {
    echo "╔═════════════════════════════════════════════════════════════════╗"
    echo "║                     CHECKING FOR UPDATES                        ║"
    echo "╚═════════════════════════════════════════════════════════════════╝"
    
    check_for_nockchain_updates
    echo ""
    check_for_nockhelper_updates
    
    return 0
}

# Display help message
display_help() {
    echo "╔═════════════════════════════════════════════════════════════════╗"
    echo "║                      NOCKCHAIN HELPER TOOL                      ║"
    echo "╚═════════════════════════════════════════════════════════════════╝"
    echo ""
    echo "CURRENT STATUS:"
    echo "⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯"
    echo "📂 Install Location: $INSTALL_DIR"
    echo "🛠️ Nockhelper: $(get_installed_nockhelper_version)"
    
    # Skip update check when displaying help to avoid GitHub API rate limits
    echo "🔄 Nockhelper Update Status: Use 'nockhelper check' to check for updates"
    
    if [ -x "$INSTALL_DIR/nockchain" ]; then
        echo "📦 Nockchain: Installed ($(get_installed_nockchain_version))"
        echo "🔄 Nockchain Update Status: Use 'nockhelper check' to check for updates"
    else
        echo "📦 Nockchain: Not installed"
    fi
    get_miner_status
    echo ""
    echo ""
    
    echo "COMMANDS:"
    echo "⎯⎯⎯⎯⎯⎯⎯⎯⎯"
    echo "  install    - Install nockchain binaries"
    echo "               Usage: nockhelper install"
    echo ""
    echo "  update     - Update nockchain binaries and helper script"
    echo "               Usage: nockhelper update"
    echo ""
    echo "  update-nockchain - Update nockchain binaries"
    echo "               Usage: nockhelper update-nockchain"
    echo ""
    echo "  update-nockhelper - Update nockhelper script"
    echo "               Usage: nockhelper update-nockhelper"
    echo ""
    echo "  download   - Download/update nockchain binaries from latest release"
    echo "               Usage: nockhelper download"
    echo ""
    echo "  check      - Check for nockchain updates"
    echo "               Usage: nockhelper check"
    echo ""
    echo "  run        - Run nockchain miner in a screen session"
    echo "               Usage: nockhelper run"
    echo ""
    echo "  run <N>    - Run N instances of nockchain miners in separate screen sessions"
    echo "               Usage: nockhelper run 10"
    echo ""
    echo "  uninstall  - Remove nockchain installation"
    echo "               Usage: nockhelper uninstall"
    echo ""
    echo "  status     - Check miner status"
    echo "               Usage: nockhelper status"
    echo ""
    echo "  help       - Display this help message"
    echo "               Usage: nockhelper help"
    echo ""
    
    echo "SCREEN MANAGEMENT:"
    echo "⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯"
    echo "  To attach to running miner:  screen -r nock"
    echo "  To detach from session:      Press Ctrl+A, then D"
    echo "  To stop the miner:           screen -S nock -X quit"
    echo ""
    
    echo "ENVIRONMENT:"
    echo "⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯"
    echo "  Operating System: $(detect_os)"
    echo "  Architecture:     $(detect_arch)"
    echo "  Preferred Shell:  $(detect_shell)"
    echo ""
    
    echo "For more information, visit: https://github.com/sarkrui/nockchain-auto"
}

# Check miner status
check_status() {
    # Check dependencies first
    check_dependencies
    
    echo "Nockchain Status:"
    echo "⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯"
    
    echo "🛠️ Nockhelper version: $(get_installed_nockhelper_version)"
    
    if [ -d "$INSTALL_DIR" ]; then
        echo "📂 Installation directory: $INSTALL_DIR (exists)"
    else
        echo "📂 Installation directory: $INSTALL_DIR (missing)"
    fi
    
    if [ -x "$INSTALL_DIR/nockchain" ]; then
        echo "📦 Nockchain binary: Found and executable"
        echo "📦 Nockchain version: $(get_installed_nockchain_version)"
        check_for_nockchain_updates
    else
        echo "📦 Nockchain binary: Not found or not executable"
    fi
    
    get_miner_status
    
    # Check for batch miner instances directories
    if [ -d "$INSTALL_DIR" ]; then
        local batch_dirs=0
        for dir in "$INSTALL_DIR"/nock-*; do
            if [ -d "$dir" ] && [ -x "$dir/nockchain" ]; then
                batch_dirs=$((batch_dirs+1))
            fi
        done
        
        if [ $batch_dirs -gt 0 ]; then
            echo "📦 Batch miner instance directories found: $batch_dirs"
        fi
    fi
    
    if command_exists screen; then
        # Commands for single instance
        if screen -list | grep -q "nock$"; then
            echo ""
            echo "Default Miner Control Commands:"
            echo "  Attach to miner: screen -r nock"
            echo "  Stop miner:      screen -S nock -X quit"
        fi
        
        # Commands for batch instances
        local batch_running=0
        while read -r line; do
            if [[ $line =~ nock-([0-9]+) ]]; then
                batch_running=$((batch_running+1))
            fi
        done < <(screen -list | grep -o "nock-[0-9]\+")
        
        if [ $batch_running -gt 0 ]; then
            echo ""
            echo "Batch Miners Control Commands:"
            echo "  List all sessions:      screen -ls"
            echo "  Attach to miner #N:     screen -r nock-N"
            echo "  Stop miner #N:          screen -S nock-N -X quit"
            echo "  Stop all batch miners:  for i in \$(screen -ls | grep nock- | awk '{print \$1}'); do screen -S \$i -X quit; done"
        fi
    fi
}

# Install nockchain
install_nockchain() {
    # Check dependencies first
    check_dependencies
    
    local os=$(detect_os)
    local arch=$(detect_arch)
    local release_tag=$(get_latest_release_tag)
    
    echo "╔═════════════════════════════════════════════════════════════════╗"
    echo "║                   NOCKCHAIN INSTALLATION WIZARD                 ║"
    echo "╚═════════════════════════════════════════════════════════════════╝"
    echo "Detected: $os on $arch"
    echo "Latest release: $release_tag"

    # Install screen using Homebrew on macOS
    if [[ "$os" == "macos" ]]; then
        if ! command_exists brew; then
            echo "Homebrew is required but was not found."
            if confirm "Would you like to install Homebrew?"; then
                /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
            else
                echo "Homebrew installation skipped. Cannot continue without Homebrew."
                exit 1
            fi
        fi
        
        if ! command_exists screen; then
            if confirm "Screen is required but not installed. Would you like to install screen?"; then
                echo "Installing screen using Homebrew..."
                brew install screen
            else
                echo "Screen installation skipped. Cannot run nockchain in background without screen."
            fi
        else
            echo "✅ screen is already installed."
        fi
    fi

    # Check if download tools are available
    if ! command_exists curl && ! command_exists wget; then
        echo "Either curl or wget is required but neither was found. Please install one of them and try again."
        exit 1
    fi

    # Check if unzip is installed
    if ! command_exists unzip; then
        echo "unzip is required but was not found."
        if confirm "Would you like to install unzip?"; then
            if [[ "$os" == "macos" ]]; then
                brew install unzip
            elif [[ "$os" == "linux" ]]; then
                if command_exists apt-get; then
                    sudo apt-get install -y unzip
                elif command_exists yum; then
                    sudo yum install -y unzip
                else
                    echo "Cannot automatically install unzip. Please install it manually and try again."
                    exit 1
                fi
            fi
        else
            echo "Unzip installation skipped. Cannot continue without unzip."
            exit 1
        fi
    fi

    # Confirm installation
    if ! confirm "Ready to install nockchain to $INSTALL_DIR. Continue?"; then
        echo "Installation aborted by user."
        exit 0
    fi

    # Create installation directory if it doesn't exist
    if [ ! -d "$INSTALL_DIR" ]; then
        echo "Creating installation directory: $INSTALL_DIR"
        mkdir -p "$INSTALL_DIR"
    fi

    # Set download URL based on OS and architecture
    local download_url="https://github.com/sarkrui/nockchain-auto/releases/latest/download/nockchain-all-$os-$arch.zip"
    local temp_zip="$INSTALL_DIR/nockchain-all-$os-$arch.zip"

    echo "Downloading nockchain binaries from: $download_url ($release_tag)"
    
    # Download the zip file
    if command_exists curl; then
        curl -L "$download_url" -o "$temp_zip"
    else
        wget "$download_url" -O "$temp_zip"
    fi

    if [ ! -f "$temp_zip" ]; then
        echo "Failed to download nockchain binaries"
        exit 1
    fi

    # Extract the zip file
    echo "Extracting binaries to $INSTALL_DIR"
    unzip -o "$temp_zip" -d "$INSTALL_DIR"

    # Make binaries executable
    echo "Making binaries executable"
    chmod +x "$INSTALL_DIR/nockchain-wallet" "$INSTALL_DIR/equix-latency" "$INSTALL_DIR/hoonc" "$INSTALL_DIR/nockchain" "$INSTALL_DIR/nockchain-bitcoin-sync"

    # Clean up
    echo "Cleaning up"
    rm "$temp_zip"
    
    # Install helper script globally
    install_helper_globally

    echo "✅ Installation complete!"
    echo "📂 Nockchain binaries have been installed to: $INSTALL_DIR"
    echo ""
    echo "💡 Next steps:"
    echo "   - Start mining: nockhelper run"
    echo "   - View help: nockhelper help"
}

# Update nockchain
update_nockchain() {
    # Check dependencies first
    check_dependencies
    
    echo "╔═════════════════════════════════════════════════════════════════╗"
    echo "║                     UPDATING NOCKCHAIN                          ║"
    echo "╚═════════════════════════════════════════════════════════════════╝"
    
    local installed_version=$(get_installed_nockchain_version)
    local latest_version=$(get_latest_release_tag)
    
    echo "Nockchain:"
    echo "  Installed version: $installed_version"
    echo "  Latest version:    $latest_version"
    
    # Check if update is needed
    if [[ "$installed_version" != "not_installed" ]] && [[ "$installed_version" != *"unknown"* ]] && [[ "$latest_version" != "unknown" ]]; then
        # Remove 'v' prefix if present
        installed_version=${installed_version#v}
        latest_version=${latest_version#v}
        
        if ! version_gt "$latest_version" "$installed_version"; then
            echo "ℹ️ You already have the latest nockchain version ($installed_version)."
            if ! confirm "Do you want to continue with the nockchain update anyway?"; then
                echo "Nockchain update cancelled."
                update_nockhelper
                return
            fi
        fi
    fi
    
    # Update binaries
    install_nockchain
    
    echo "✅ Nockchain update complete!"
}

# Update nockhelper
update_nockhelper() {
    echo "╔═════════════════════════════════════════════════════════════════╗"
    echo "║                     UPDATING NOCKHELPER                         ║"
    echo "╚═════════════════════════════════════════════════════════════════╝"
    
    local installed_version=$(get_installed_nockhelper_version)
    local latest_version=$(get_latest_nockhelper_version)
    
    echo "Nockhelper:"
    echo "  Installed version: $installed_version"
    echo "  Latest version:    $latest_version"
    
    # Check if update is needed
    if [[ "$latest_version" != "unknown" ]]; then
        # Remove 'v' prefix if present
        installed_version=${installed_version#v}
        latest_version=${latest_version#v}
        
        if ! version_gt "$latest_version" "$installed_version"; then
            echo "ℹ️ You already have the latest nockhelper version ($installed_version)."
            if ! confirm "Do you want to continue with the nockhelper update anyway?"; then
                echo "Nockhelper update cancelled."
                return
            fi
        fi
    fi
    
    # Try to download the latest helper script
    if command_exists curl; then
        if curl -s --head --fail "$HELPER_REMOTE" >/dev/null; then
            echo "Updating helper script..."
            curl -L "$HELPER_REMOTE" -o "$HELPER_SCRIPT.new"
            if [ -f "$HELPER_SCRIPT.new" ]; then
                chmod +x "$HELPER_SCRIPT.new"
                mv "$HELPER_SCRIPT.new" "$HELPER_SCRIPT"
                echo "✅ Helper script updated."
                # Execute the updated script for the rest of the update
                exec "$HELPER_SCRIPT" update
                exit 0
            else
                echo "❌ Failed to download updated helper script."
            fi
        else
            echo "ℹ️ Helper script not found at remote URL."
        fi
    elif command_exists wget; then
        if wget --spider "$HELPER_REMOTE" 2>/dev/null; then
            echo "Updating helper script..."
            wget -q "$HELPER_REMOTE" -O "$HELPER_SCRIPT.new"
            if [ -f "$HELPER_SCRIPT.new" ]; then
                chmod +x "$HELPER_SCRIPT.new"
                mv "$HELPER_SCRIPT.new" "$HELPER_SCRIPT"
                echo "✅ Helper script updated."
                # Execute the updated script for the rest of the update
                exec "$HELPER_SCRIPT" update
                exit 0
            else
                echo "❌ Failed to download updated helper script."
            fi
        else
            echo "ℹ️ Helper script not found at remote URL."
        fi
    else
        echo "❌ Neither curl nor wget found. Cannot update helper script."
    fi
    
    echo "✅ Nockhelper update complete!"
}

# Update both nockchain and nockhelper
update_all() {
    echo "╔═════════════════════════════════════════════════════════════════╗"
    echo "║                     UPDATING ALL COMPONENTS                     ║"
    echo "╚═════════════════════════════════════════════════════════════════╝"
    
    update_nockhelper
    echo ""
    update_nockchain
    
    echo "✅ All updates complete!"
}

# Uninstall nockchain
uninstall_nockchain() {
    # Check dependencies first
    check_dependencies
    
    echo "╔═════════════════════════════════════════════════════════════════╗"
    echo "║                    UNINSTALLING NOCKCHAIN                       ║"
    echo "╚═════════════════════════════════════════════════════════════════╝"
    
    if ! confirm "Are you sure you want to uninstall nockchain from $INSTALL_DIR?"; then
        echo "Uninstall cancelled."
        return
    fi
    
    echo "Uninstalling nockchain..."
    
    # Stop any running nockchain screen sessions
    if command_exists screen; then
        if screen -list | grep -q "nock"; then
            echo "Stopping nockchain screen sessions..."
            screen -S nock -X quit 2>/dev/null || true
        fi
    fi
    
    # Remove installation directory
    if [ -d "$INSTALL_DIR" ]; then
        echo "Removing installation directory: $INSTALL_DIR"
        rm -rf "$INSTALL_DIR"
    fi
    
    # Remove from PATH in shell config
    local os=$(detect_os)
    if [[ "$os" == "macos" ]]; then
        local shell_rc="$HOME/.zshrc"
        if [ -f "$shell_rc" ]; then
            echo "Removing from $shell_rc..."
            sed -i'.bak' '/# Added by nockhelper installer/d' "$shell_rc"
            sed -i'.bak' '/export PATH="\$PATH:\/Users\/.*\/nockbin"/d' "$shell_rc"
            rm -f "$shell_rc.bak"
        fi
    else
        local shell_rc="$HOME/.bashrc"
        if [ -f "$shell_rc" ]; then
            echo "Removing from $shell_rc..."
            sed -i '/# Added by nockhelper installer/d' "$shell_rc"
            sed -i '/export PATH="\$PATH:\/home\/.*\/nockbin"/d' "$shell_rc"
        fi
    fi
    
    echo "✅ Uninstall complete! Please restart your terminal or source your shell config."
}

# Run nockchain miner in screen
run_nockchain() {
    # Check dependencies first
    check_dependencies
    
    echo "╔═════════════════════════════════════════════════════════════════╗"
    echo "║                    STARTING NOCKCHAIN MINER                     ║"
    echo "╚═════════════════════════════════════════════════════════════════╝"
    
    if ! command_exists screen; then
        echo "❌ screen is not installed. Cannot run nockchain in the background."
        return 1
    fi
    
    # Check if there's already a nockchain screen session
    if screen -list | grep -q "nock"; then
        echo "ℹ️ nockchain is already running in a screen session."
        echo "   To attach to it, run: screen -r nock"
        echo "   To kill it, run: screen -S nock -X quit"
        return 0
    fi
    
    # Make sure nockchain is installed
    if [ ! -x "$INSTALL_DIR/nockchain" ]; then
        echo "❌ nockchain binary not found or not executable."
        echo "   Please run 'nockhelper install' first."
        return 1
    fi
    
    echo "Starting nockchain miner in a screen session..."
    
    # Detect preferred shell
    local shell=$(detect_shell)
    
    # Create the screen session with the preferred shell
    screen -dmS nock $shell -c "cd $INSTALL_DIR && rm -rf ./.data.nockchain .socket/nockchain_npc.sock && ./nockchain --mining-pubkey $MINING_PUBKEY --mine --peer /ip4/95.216.102.60/udp/3006/quic-v1 --peer /ip4/65.108.123.225/udp/3006/quic-v1 --peer /ip4/65.109.156.108/udp/3006/quic-v1 --peer /ip4/65.21.67.175/udp/3006/quic-v1 --peer /ip4/65.109.156.172/udp/3006/quic-v1 --peer /ip4/34.174.22.166/udp/3006/quic-v1 --peer /ip4/34.95.155.151/udp/30000/quic-v1 --peer /ip4/34.18.98.38/udp/30000/quic-v1; exec $shell"
    
    echo "✅ Nockchain miner is now running in a screen session named 'nock'"
    echo ""
    echo "💡 SCREEN SESSION COMMANDS:"
    echo "   To attach to the session:  screen -r nock"
    echo "   To detach from the session: Press Ctrl+A, then D"
    echo "   To stop the miner:         screen -S nock -X quit"
    
    return 0
}

# Run multiple nockchain miners in separate screen sessions
run_batch_nockchain() {
    # Check dependencies first
    check_dependencies
    
    local num_instances=$1
    
    echo "╔═════════════════════════════════════════════════════════════════╗"
    echo "║               STARTING MULTIPLE NOCKCHAIN MINERS                ║"
    echo "╚═════════════════════════════════════════════════════════════════╝"
    
    if ! command_exists screen; then
        echo "❌ screen is not installed. Cannot run nockchain in the background."
        return 1
    fi
    
    # Make sure nockchain is installed
    if [ ! -x "$INSTALL_DIR/nockchain" ]; then
        echo "❌ nockchain binary not found or not executable."
        echo "   Please run 'nockhelper install' first."
        return 1
    fi
    
    echo "Starting $num_instances nockchain miner instances in separate screen sessions..."
    
    # Detect preferred shell
    local shell=$(detect_shell)
    
    # Environment variables for nockchain
    local env_vars="export RUST_LOG=\"info,nockchain=debug,nockchain_libp2p_io=info,libp2p=info,libp2p_quic=info\" && export MINIMAL_LOG_FORMAT=\"true\""
    
    # Create directories and start instances
    for ((i=1; i<=$num_instances; i++)); do
        local instance_dir="$INSTALL_DIR/nock-$i"
        local screen_name="nock-$i"
        
        # Check if screen session already exists
        if screen -list | grep -q "$screen_name"; then
            echo "ℹ️ nockchain instance $i is already running in screen session '$screen_name'"
            continue
        fi
        
        # Create instance directory if it doesn't exist
        if [ ! -d "$instance_dir" ]; then
            echo "Creating directory for instance $i: $instance_dir"
            mkdir -p "$instance_dir"
        fi
        
        # Copy nockchain binary to instance directory
        echo "Copying nockchain binary to instance $i directory..."
        cp "$INSTALL_DIR/nockchain" "$instance_dir/"
        chmod +x "$instance_dir/nockchain"
        
        # Create screen session for this instance
        echo "Starting nockchain instance $i in screen session '$screen_name'..."
        screen -dmS "$screen_name" $shell -c "$env_vars && cd $instance_dir && rm -rf ./.data.nockchain .socket/nockchain_npc.sock && ./nockchain --mining-pubkey $MINING_PUBKEY --mine --peer /ip4/95.216.102.60/udp/3006/quic-v1 --peer /ip4/65.108.123.225/udp/3006/quic-v1 --peer /ip4/65.109.156.108/udp/3006/quic-v1 --peer /ip4/65.21.67.175/udp/3006/quic-v1 --peer /ip4/65.109.156.172/udp/3006/quic-v1 --peer /ip4/34.174.22.166/udp/3006/quic-v1 --peer /ip4/34.95.155.151/udp/30000/quic-v1 --peer /ip4/34.18.98.38/udp/30000/quic-v1; exec $shell"
        
        echo "✅ Started nockchain instance $i in screen session '$screen_name'"
    done
    
    echo ""
    echo "✅ All nockchain instances are now running"
    echo ""
    echo "💡 SCREEN SESSION COMMANDS:"
    echo "   To list all sessions:       screen -ls"
    echo "   To attach to a session:     screen -r nock-<id>"
    echo "   To detach from a session:   Press Ctrl+A, then D"
    echo "   To stop a miner instance:   screen -S nock-<id> -X quit"
    
    return 0
}

# Main function
main() {
    # If script is called directly from installation
    if [ "$(basename "$0")" != "nockhelper" ]; then
        install_nockchain
        return
    fi

    # Parse command line arguments
    local command=${1:-""}
    local arg2=${2:-""}
    
    case "$command" in
        install)
            install_nockchain
            ;;
        update)
            update_all
            ;;
        update-nockchain)
            update_nockchain
            ;;
        update-nockhelper)
            update_nockhelper
            ;;
        download)
            download_binaries
            ;;
        check)
            check_for_updates
            ;;
        uninstall)
            uninstall_nockchain
            ;;
        run)
            if [[ "$arg2" =~ ^[0-9]+$ ]]; then
                # If run is followed by a number, run batch instances
                run_batch_nockchain "$arg2"
            else
                # Otherwise, run a single instance
                run_nockchain
            fi
            ;;
        status)
            check_status
            ;;
        help|--help|-h)
            display_help
            ;;
        "")
            # No command provided, show help
            display_help
            ;;
        *)
            echo "❌ Unknown command: $command"
            display_help
            exit 1
            ;;
    esac
}

# Run the main function
main "$@" 